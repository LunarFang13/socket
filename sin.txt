struct numbers{

float a;
int b;

};

program SINE_PROG{

version SINE_VERS{

float numsine(numbers)=1;

}=1;

}=0x4562877;
/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 /

#include "sine.h"

float
numsine_1_svc(numbers argp, struct svc_reqrqstp)
{
    static float  result;

	argp->a = (argp->a)*3.14159/180;
        float temp=argp->a;
        result=argp->a;
        for(int i=1;i<=argp->b;i++)
	{
      		temp=(temp*(-1)*argp->a*argp->a)/(2i(2i+1));
		result=result+temp;
	}

	return &result;
}
/
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 /

#include "sine.h"


void
sine_prog_1(charhost, float x, int y)
{
    CLIENT *clnt;
    float  result_1;
    numbers  numsine_1_arg;

#ifndef    DEBUG
    clnt = clnt_create (host, SINE_PROG, SINE_VERS, "udp");
    if (clnt == NULL) {
        clnt_pcreateerror (host);
        exit (1);
    }
#endif    / DEBUG /
    numsine_1_arg.a = x;
    numsine_1_arg.b = y;
    result_1 = numsine_1(&numsine_1_arg, clnt);
    if (result_1 == (float) NULL) {
        clnt_perror (clnt, "call failed");
    }
    else {
        printf("Result: %f\n", result_1);
    }
#ifndef    DEBUG
    clnt_destroy (clnt);
#endif     / DEBUG /
}


int
main (int argc, charargv[])
{
    char *host;

    if (argc < 4) {
        printf ("usage: %s server_host\n", argv[0]);
        exit (1);
    }
    host = argv[1];
    sine_prog_1(host, atof(argv[2]), atoi(argv[3]));
exit (0);
}